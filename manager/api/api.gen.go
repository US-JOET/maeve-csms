// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ChargeStationAuth Connection details for a charge station
type ChargeStationAuth struct {
	// Base64SHA256Password The base64 encoded, SHA-256 hash of the charge station password
	Base64SHA256Password *string `json:"base64SHA256Password,omitempty"`

	// SecurityProfile The security profile to use for the charge station: * `0` - unsecured transport with basic auth * `1` - TLS with basic auth * `2` - TLS with client certificate
	SecurityProfile int `json:"securityProfile"`
}

// RegisterChargeStationJSONRequestBody defines body for RegisterChargeStation for application/json ContentType.
type RegisterChargeStationJSONRequestBody = ChargeStationAuth

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Register a new charge station
	// (POST /cs/{csId})
	RegisterChargeStation(w http.ResponseWriter, r *http.Request, csId string)
	// Returns the authentication details
	// (GET /cs/{csId}/auth)
	LookupChargeStationAuth(w http.ResponseWriter, r *http.Request, csId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// RegisterChargeStation operation middleware
func (siw *ServerInterfaceWrapper) RegisterChargeStation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "csId" -------------
	var csId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "csId", runtime.ParamLocationPath, chi.URLParam(r, "csId"), &csId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "csId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterChargeStation(w, r, csId)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LookupChargeStationAuth operation middleware
func (siw *ServerInterfaceWrapper) LookupChargeStationAuth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "csId" -------------
	var csId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "csId", runtime.ParamLocationPath, chi.URLParam(r, "csId"), &csId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "csId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupChargeStationAuth(w, r, csId)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cs/{csId}", wrapper.RegisterChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cs/{csId}/auth", wrapper.LookupChargeStationAuth)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yV32/jNgzH/xVC29Pgq9OuV2B+WlcMuAI9rFhue7kWOFZmIl1tSpPopEGR/32gnKxN",
	"4+1lGLA3W6b448sP6WdjQx8DE0s2zbPJ1lGP5fHKYVrSXFB84MtBnB62lG3yUY9MY64CM1l9gZYEfZdh",
	"ERIg2HIX8njZVCamECmJp+L6ATNdnM8/XJ69v7jFnNchtcfePzmC0RKIbWiprWD+4fLd2fsLcJgdhAWI",
	"ozfBIO4dVqbHpxvipaZ+cV4Z2UQyjcmSPC/NtjKZ7JC8bG5TWPiOplPYG0EcrUACDJlKpcfhG/gOvsy+",
	"wDsYuNykFiQh5xiSwNqL05q8BRzEqe2p2n66mU99Ozv4ZjtPLGBVx4W3KHSn0u6q8iy0pGS228ok+mPw",
	"iVrTfD6q8f6vG+HhK1kxW73heRG0fBtY0Io+Uo++M43pkVb0Tgj7H8WFYelkHdJjPrGhN5Vh7NXXR/z5",
	"dwI1Ul0PRbxmocTYweXttYqnmSa0OzVUwvH21fzjvAJ62lmP5WbILgxdWyT/5er2+sRUpvOWOJd+7eJf",
	"RrSO4OxkpvHFS/eSlfo1lVlRymNCs5PZaBciMUZvGvN9OapMRHEF0drm+tnm63arbzFkOabjV1r6LJQy",
	"IDCt35BwAoWeTRbqYe27DjDnoScQhzJBzh07zMBBYEMCD0SsxK28Jk0tILejl9ihpSnwPUsAhEjcel6W",
	"Y7rjHMALWOTRpQ288MuC5doR67dM3GoJDyGIxh/h0goKXzq45fW6fVXzwXYowiXsScUwzeepMXqbbEus",
	"kSgZpc80RfoXoFR6U+32kUr/z7O8vR+ppyw/hXazR5m4tA1j7HY11V+zpvT8yvO3iRamMd/UL6uw3u3B",
	"+ngJbg8HTNJA5SDHwHlcb2ez04ldmQiF2nE8Fjh0E0D9xvQUyQq1QCmFcZjz0PeYNq+0n8St2L5QW+Nu",
	"Yy9pklwZEudC0X5z72uCh00517GBJQqtcaNj22p3e88ELqz1QCNoE8dNNAX0ET03ITwO8VjU/wk/Bz2c",
	"/dcQveHjsL7yC9hnpNCcz86ngHnksOYjFP4NYy9kvGrwq1/8mHymtPr7ZnXBYgctragLsde/1mhvKjMk",
	"/ak4kdjUdbFzIUvzw/nprMbo69XMbO+3fwYAAP//LnPMXJgIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
