// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for TokenCacheMode.
const (
	ALLOWED        TokenCacheMode = "ALLOWED"
	ALLOWEDOFFLINE TokenCacheMode = "ALLOWED_OFFLINE"
	ALWAYS         TokenCacheMode = "ALWAYS"
	NEVER          TokenCacheMode = "NEVER"
)

// Defines values for TokenType.
const (
	ADHOCUSER TokenType = "AD_HOC_USER"
	APPUSER   TokenType = "APP_USER"
	OTHER     TokenType = "OTHER"
	RFID      TokenType = "RFID"
)

// Certificate A client certificate
type Certificate struct {
	// Certificate The PEM encoded certificate with newlines replaced by `\n`
	Certificate string `json:"certificate"`
}

// ChargeStationAuth Connection details for a charge station
type ChargeStationAuth struct {
	// Base64SHA256Password The base64 encoded, SHA-256 hash of the charge station password
	Base64SHA256Password *string `json:"base64SHA256Password,omitempty"`

	// SecurityProfile The security profile to use for the charge station: * `0` - unsecured transport with basic auth * `1` - TLS with basic auth * `2` - TLS with client certificate
	SecurityProfile int `json:"securityProfile"`
}

// Registration Defines the initial connection details for the OCPI registration process
type Registration struct {
	// Token The token to use for communicating with the eMSP (CREDENTIALS_TOKEN_A).
	Token string `json:"token"`

	// Url The URL of the eMSP versions endpoint. If provided the CSMS will act as the sender of the versions request.
	Url *string `json:"url,omitempty"`
}

// Status HTTP status
type Status struct {
	// Error The error details
	Error *string `json:"error,omitempty"`

	// Status The status description
	Status string `json:"status"`
}

// Token An authorization token
type Token struct {
	// CacheMode Indicates what type of token caching is allowed
	CacheMode TokenCacheMode `json:"cacheMode"`

	// ContractId The contract ID (eMAID) associated with the token (with optional component separators)
	ContractId string `json:"contractId"`

	// CountryCode The country code of the issuing eMSP
	CountryCode string `json:"countryCode"`

	// GroupId This id groups a couple of tokens to make two or more tokens work as one
	GroupId *string `json:"groupId,omitempty"`

	// Issuer Issuing company, most of the times the name of the company printed on the RFID card, not necessarily the eMSP
	Issuer string `json:"issuer"`

	// LanguageCode The preferred language to use encoded as ISO 639-1 language code
	LanguageCode *string `json:"languageCode,omitempty"`

	// LastUpdated The date the record was last updated (ignored on create/update)
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`

	// PartyId The party id of the issuing eMSP
	PartyId string `json:"partyId"`

	// Type The type of token
	Type TokenType `json:"type"`

	// Uid The unique token id
	Uid string `json:"uid"`

	// Valid Is this token valid
	Valid bool `json:"valid"`

	// VisualNumber The visual/readable number/identification printed on an RFID card
	VisualNumber *string `json:"visualNumber,omitempty"`
}

// TokenCacheMode Indicates what type of token caching is allowed
type TokenCacheMode string

// TokenType The type of token
type TokenType string

// ListTokensParams defines parameters for ListTokens.
type ListTokensParams struct {
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// UploadCertificateJSONRequestBody defines body for UploadCertificate for application/json ContentType.
type UploadCertificateJSONRequestBody = Certificate

// RegisterChargeStationJSONRequestBody defines body for RegisterChargeStation for application/json ContentType.
type RegisterChargeStationJSONRequestBody = ChargeStationAuth

// RegisterPartyJSONRequestBody defines body for RegisterParty for application/json ContentType.
type RegisterPartyJSONRequestBody = Registration

// SetTokenJSONRequestBody defines body for SetToken for application/json ContentType.
type SetTokenJSONRequestBody = Token

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a certificate
	// (POST /certificate)
	UploadCertificate(w http.ResponseWriter, r *http.Request)
	// Delete a certificate
	// (DELETE /certificate/{certificateHash})
	DeleteCertificate(w http.ResponseWriter, r *http.Request, certificateHash string)
	// Lookup a certificate
	// (GET /certificate/{certificateHash})
	LookupCertificate(w http.ResponseWriter, r *http.Request, certificateHash string)
	// Register a new charge station
	// (POST /cs/{csId})
	RegisterChargeStation(w http.ResponseWriter, r *http.Request, csId string)
	// Returns the authentication details
	// (GET /cs/{csId}/auth)
	LookupChargeStationAuth(w http.ResponseWriter, r *http.Request, csId string)
	// Registers an OCPI party with the CSMS
	// (POST /register)
	RegisterParty(w http.ResponseWriter, r *http.Request)
	// List authorization tokens
	// (GET /token)
	ListTokens(w http.ResponseWriter, r *http.Request, params ListTokensParams)
	// Create/update an authorization token
	// (POST /token)
	SetToken(w http.ResponseWriter, r *http.Request)
	// Lookup an authorization token
	// (GET /token/{tokenUid})
	LookupToken(w http.ResponseWriter, r *http.Request, tokenUid string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// UploadCertificate operation middleware
func (siw *ServerInterfaceWrapper) UploadCertificate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadCertificate(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCertificate operation middleware
func (siw *ServerInterfaceWrapper) DeleteCertificate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "certificateHash" -------------
	var certificateHash string

	err = runtime.BindStyledParameterWithLocation("simple", false, "certificateHash", runtime.ParamLocationPath, chi.URLParam(r, "certificateHash"), &certificateHash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "certificateHash", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCertificate(w, r, certificateHash)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LookupCertificate operation middleware
func (siw *ServerInterfaceWrapper) LookupCertificate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "certificateHash" -------------
	var certificateHash string

	err = runtime.BindStyledParameterWithLocation("simple", false, "certificateHash", runtime.ParamLocationPath, chi.URLParam(r, "certificateHash"), &certificateHash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "certificateHash", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupCertificate(w, r, certificateHash)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RegisterChargeStation operation middleware
func (siw *ServerInterfaceWrapper) RegisterChargeStation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "csId" -------------
	var csId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "csId", runtime.ParamLocationPath, chi.URLParam(r, "csId"), &csId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "csId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterChargeStation(w, r, csId)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LookupChargeStationAuth operation middleware
func (siw *ServerInterfaceWrapper) LookupChargeStationAuth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "csId" -------------
	var csId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "csId", runtime.ParamLocationPath, chi.URLParam(r, "csId"), &csId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "csId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupChargeStationAuth(w, r, csId)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RegisterParty operation middleware
func (siw *ServerInterfaceWrapper) RegisterParty(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterParty(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTokens operation middleware
func (siw *ServerInterfaceWrapper) ListTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTokensParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTokens(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetToken operation middleware
func (siw *ServerInterfaceWrapper) SetToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetToken(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LookupToken operation middleware
func (siw *ServerInterfaceWrapper) LookupToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tokenUid" -------------
	var tokenUid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tokenUid", runtime.ParamLocationPath, chi.URLParam(r, "tokenUid"), &tokenUid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tokenUid", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupToken(w, r, tokenUid)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/certificate", wrapper.UploadCertificate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/certificate/{certificateHash}", wrapper.DeleteCertificate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/certificate/{certificateHash}", wrapper.LookupCertificate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cs/{csId}", wrapper.RegisterChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cs/{csId}/auth", wrapper.LookupChargeStationAuth)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register", wrapper.RegisterParty)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/token", wrapper.ListTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/token", wrapper.SetToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/token/{tokenUid}", wrapper.LookupToken)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+e5cY/ZSQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
