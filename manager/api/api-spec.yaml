openapi: "3.0.0"
info:
  version: "0.0.0"
  title: "MaEVe CSMS"
  description: "Internal API to interact with the MaEVe CSMS, external clients should use OCPI."
  contact:
    name: "MaEVe team"
    email: "maeve-team@thoughtworks.com"
  license:
    name: "Apache 2.0"
servers:
  - url: http://localhost:9410/api/v0
    description: The local development server
paths:
  /cs/{csId}:
    post:
      summary: "Register a new charge station"
      description: |
        Registers a new charge station. The system will assume that the charge station
        has not yet been provisioned and will place the charge station into a pending state
        so it can been configured when it sends a boot notification.
      operationId: "registerChargeStation"
      parameters:
        - name: "csId"
          in: "path"
          description: "The charge station identifier"
          schema:
            type: "string"
            maxLength: 64
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/ChargeStationAuth"
      responses:
        "201":
          description: "Created"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
  /cs/{csId}/auth:
    get:
      summary: "Returns the authentication details"
      description: |
        Returns the details required by the CSMS gateway to determine how to authenticate
        the charge station
      operationId: "lookupChargeStationAuth"
      parameters:
        - name: "csId"
          in: "path"
          description: "The charge station identifier"
          schema:
            type: "string"
            maxLength: 64
      responses:
        "200":
          description: "Charge station auth response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChargeStationAuth"
        "404":
          description: "Unknown charge station"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
  /token:
    post:
      summary: "Create/update an authorization token"
      description: |
        Creates or updates a token that can be used to authorize a charge
      operationId: "setToken"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Token"
      responses:
        "201":
          description: "Created"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
  /token/{tokenUid}:
    get:
      summary: "Lookup an authorization token"
      description: |
        Lookup a token that can be used to authorize a charge
      operationId: "lookupToken"
      parameters:
        - required: true
          in: "path"
          name: "tokenUid"
          schema:
            type: "string"
            maxLength: 36
      responses:
        "200":
          description: "Authorization token details"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Token"
        "404":
          description: "Not found"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Status"
        default:
          description: "Unexpected error"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Status"
  /certificate:
    post:
      summary: "Upload a certificate"
      description: |
        Uploads a client certificate to the CSMS. The CSMS can use the certificate to authenticate
        the charge station using mutual TLS when the TLS operations are being offloaded to a load-balancer.
      operationId: "uploadCertificate"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/Certificate'
      responses:
        "201":
          description: "Created"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
  /certificate/{certificateHash}:
    get:
      summary: "Lookup a certificate"
      description: |
        Lookup a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash
        of the DER bytes.
      operationId: "lookupCertificate"
      parameters:
        - required: true
          in: "path"
          name: "certificateHash"
          schema:
            type: "string"
            maxLength: 64
      responses:
        "200":
          description: "Certificate details"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Certificate"
        "404":
          description: "Not found"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Status"
        default:
          description: "Unexpected error"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Status"
    delete:
      summary: "Delete a certificate"
      description: |
        Deletes a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash
        of the DER bytes.
      operationId: "deleteCertificate"
      parameters:
        - required: true
          in: "path"
          name: "certificateHash"
          schema:
            type: "string"
            maxLength: 64
      responses:
        "204":
          description: "No content"
        "404":
          description: "Not found"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Status"
        default:
          description: "Unexpected error"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Status"
components:
  schemas:
    ChargeStationAuth:
      type: "object"
      description: "Connection details for a charge station"
      required:
        - "securityProfile"
      properties:
        securityProfile:
          type: "integer"
          description: >
            The security profile to use for the charge station:
            * `0` - unsecured transport with basic auth
            * `1` - TLS with basic auth
            * `2` - TLS with client certificate
        base64SHA256Password:
          type: "string"
          maxLength: 64
          description: "The base64 encoded, SHA-256 hash of the charge station password"
    Token:
      type: "object"
      description: "An authorization token"
      required:
        - countryCode
        - partyId
        - type
        - uid
        - contractId
        - issuer
        - valid
        - cacheMode
      properties:
        countryCode:
          type: "string"
          minLength: 2
          maxLength: 2
          description: "The country code of the issuing eMSP"
        partyId:
          type: "string"
          minLength: 3
          maxLength: 3
          description: "The party id of the issuing eMSP"
        type:
          type: "string"
          enum:
            - "AD_HOC_USER"
            - "APP_USER"
            - "OTHER"
            - "RFID"
          description: "The type of token"
        uid:
          type: "string"
          description: "The unique token id"
          maxLength: 36
        contractId:
          type: "string"
          pattern: "([A-Za-z]{2})(-?)([A-Za-z]{3})(-?)([A-Za-z0-9]{9})(-?)([A-Za-z0-9])?"
          description: "The contract ID (eMAID) associated with the token (with optional component separators)"
        visualNumber:
          type: "string"
          description: "The visual/readable number/identification printed on an RFID card"
        issuer:
          type: "string"
          description: "Issuing company, most of the times the name of the company printed on the RFID card, not necessarily the eMSP"
        groupId:
          type: "string"
          maxLength: 36
          description: "This id groups a couple of tokens to make two or more tokens work as one"
        valid:
          type: "boolean"
          description: "Is this token valid"
        languageCode:
          type: "string"
          minLength: 2
          maxLength: 2
          description: "The preferred language to use encoded as ISO 639-1 language code"
        cacheMode:
          type: "string"
          enum:
            - "ALWAYS"
            - "ALLOWED"
            - "ALLOWED_OFFLINE"
            - "NEVER"
          description: "Indicates what type of token caching is allowed"
        lastUpdated:
          type: "string"
          format: "date-time"
          description: "The date the record was last updated (ignored on create/update)"
    Status:
      type: "object"
      description: "HTTP status"
      required:
        - "status"
      properties:
        status:
          type: "string"
          description: "The status description"
        error:
          type: "string"
          description: "The error details"
    Certificate:
      type: "object"
      description: "A client certificate"
      required:
        - "certificate"
      properties:
        certificate:
          type: "string"
          description: "The PEM encoded certificate with newlines replaced by `\\n`"
