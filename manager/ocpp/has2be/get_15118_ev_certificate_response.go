// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package has2be

import "encoding/json"
import "fmt"
import "reflect"

type CertificateChainType struct {
	// Certificate corresponds to the JSON schema field "certificate".
	Certificate string `json:"certificate" yaml:"certificate" mapstructure:"certificate"`

	// ChildCertificate corresponds to the JSON schema field "childCertificate".
	ChildCertificate []string `json:"childCertificate,omitempty" yaml:"childCertificate,omitempty" mapstructure:"childCertificate,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CertificateChainType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["certificate"]; !ok || v == nil {
		return fmt.Errorf("field certificate in CertificateChainType: required")
	}
	type Plain CertificateChainType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.ChildCertificate) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "childCertificate", 1)
	}
	if len(plain.ChildCertificate) > 4 {
		return fmt.Errorf("field %s length: must be <= %d", "childCertificate", 4)
	}
	*j = CertificateChainType(plain)
	return nil
}

type Iso15118EVCertificateStatusEnumType string

var enumValues_Iso15118EVCertificateStatusEnumType = []interface{}{
	"Accepted",
	"Failed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Iso15118EVCertificateStatusEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Iso15118EVCertificateStatusEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Iso15118EVCertificateStatusEnumType, v)
	}
	*j = Iso15118EVCertificateStatusEnumType(v)
	return nil
}

type Get15118EVCertificateResponseJson struct {
	// ContractSignatureCertificateChain corresponds to the JSON schema field
	// "contractSignatureCertificateChain".
	ContractSignatureCertificateChain *CertificateChainType `json:"contractSignatureCertificateChain,omitempty" yaml:"contractSignatureCertificateChain,omitempty" mapstructure:"contractSignatureCertificateChain,omitempty"`

	// Raw CertificateInstallationRes response for the EV, Base64 encoded.
	//
	ExiResponse string `json:"exiResponse" yaml:"exiResponse" mapstructure:"exiResponse"`

	// SaProvisioningCertificateChain corresponds to the JSON schema field
	// "saProvisioningCertificateChain".
	SaProvisioningCertificateChain *CertificateChainType `json:"saProvisioningCertificateChain,omitempty" yaml:"saProvisioningCertificateChain,omitempty" mapstructure:"saProvisioningCertificateChain,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status Iso15118EVCertificateStatusEnumType `json:"status" yaml:"status" mapstructure:"status"`
}

const Iso15118EVCertificateStatusEnumTypeAccepted Iso15118EVCertificateStatusEnumType = "Accepted"
const Iso15118EVCertificateStatusEnumTypeFailed Iso15118EVCertificateStatusEnumType = "Failed"

// UnmarshalJSON implements json.Unmarshaler.
func (j *Get15118EVCertificateResponseJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["exiResponse"]; !ok || v == nil {
		return fmt.Errorf("field exiResponse in Get15118EVCertificateResponseJson: required")
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status in Get15118EVCertificateResponseJson: required")
	}
	type Plain Get15118EVCertificateResponseJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Get15118EVCertificateResponseJson(plain)
	return nil
}
